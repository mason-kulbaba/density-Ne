#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with familyID in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 8 x 4 matrix: 8 families by 4 nodes
#name the rows (by Den Treat) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 8 x 4 x 8 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutL, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("Low Den Fitness", "SE")
round(foo, 3)
L_estimates<- round(foo, 3)
L_estimates
#make rownames first column and combine all estimates
library(data.table)
L_estimates<- as.data.frame(L_estimates)
M_estimates<- as.data.frame(M_estimates)
H_estimates<- as.data.frame(H_estimates)
setDT(L_estimates, keep.rownames = TRUE)[]
setDT(M_estimates, keep.rownames = TRUE)[]
setDT(H_estimates, keep.rownames = TRUE)[]
setDT(L_estimates, keep.rownames = TRUE)[]
setDT(M_estimates, keep.rownames = TRUE)[]
setDT(H_estimates, keep.rownames = TRUE)[]
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutM, se.fit=TRUE)
#make design matrix
fred <- data.frame(familyID=levels(redataM$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#seed seed.ct in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with familyID in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 9 x 4 matrix: 9 families by 4 nodes
#name the rows (by Den Treat) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 9 x 4 x 9 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("Med Den Fitness", "SE")
round(foo, 3)
M_estimates<- round(foo, 3)
M_estimates
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutH, se.fit=TRUE)
#make design matrix
fred <- data.frame(familyID=levels(redataH$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#add fit (seeds) in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutH, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with individuals in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 10 x 4 matrix: 10 families by 4 nodes
#name the rows (by familyID) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 10 x 4 x 10 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutH, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutH, se.fit=TRUE)
#make design matrix
fred <- data.frame(familyID=levels(redataH$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#add fit (seeds) in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutH, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with individuals in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 10 x 4 matrix: 10 families by 4 nodes
#name the rows (by familyID) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 10 x 4 x 10 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutH, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("High Den Fitness", "SE")
round(foo, 3)
H_estimates<- round(foo,3)
H_estimates
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutH, se.fit=TRUE)
#make design matrix
fred <- data.frame(familyID=levels(redataH$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#add fit (seeds) in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutH, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with individuals in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 10 x 4 matrix: 10 families by 4 nodes
#name the rows (by familyID) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 10 x 4 x 10 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutH, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("High Den Fitness", "SE")
round(foo, 3)
H_estimates<- round(foo,3)
H_estimates
########################
#####MEDIUM DENSITY#####
########################
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutM, se.fit=TRUE)
#make design matrix
fred <- data.frame(familyID=levels(redataM$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#seed seed.ct in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with familyID in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 9 x 4 matrix: 9 families by 4 nodes
#name the rows (by Den Treat) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 9 x 4 x 9 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("Med Den Fitness", "SE")
round(foo, 3)
M_estimates<- round(foo, 3)
M_estimates
#####################
#####LOW DENSITY#####
#####################
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutL, se.fit=TRUE)
#make data.frame of indivudals for each block (1-8)
fred <- data.frame(familyID=levels(redataL$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#seed seed.ct in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with familyID in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 8 x 4 matrix: 8 families by 4 nodes
#name the rows (by Den Treat) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 8 x 4 x 8 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutL, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("Low Den Fitness", "SE")
round(foo, 3)
L_estimates<- round(foo, 3)
L_estimates
#make rownames first column and combine all estimates
library(data.table)
L_estimates<- as.data.frame(L_estimates)
M_estimates<- as.data.frame(M_estimates)
H_estimates<- as.data.frame(H_estimates)
setDT(L_estimates, keep.rownames = TRUE)[]
setDT(M_estimates, keep.rownames = TRUE)[]
setDT(H_estimates, keep.rownames = TRUE)[]
#reload data
fin<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/density-Ne/data/aster.dat.csv")
library(emmeans)
hi<- subset(fin, Gen=="HG")
lo<- subset(fin, Gen=="LG")
stderr<- function(x) sd(x)/sqrt(length(x))
#High Ne
#Above ground biomass
aggregate(hi$mass.a, by=list(hi$Den), mean)
aggregate(hi$mass.a, by=list(hi$Den), stderr)
#High Ne
#Above ground biomass
aggregate(hi$mass.a, by=list(hi$Den), mean)
aggregate(hi$mass.a, by=list(hi$Den), stderr)
#Below ground biomass
aggregate(hi$mass.b, by=list(hi$Den), mean)
aggregate(hi$mass.b, by=list(hi$Den), stderr)
#Low Ne
#Above ground biomass
aggregate(lo$mass.a, by=list(lo$Den), mean)
aggregate(lo$mass.a, by=list(lo$Den), stderr)
#Below ground biomass
aggregate(lo$mass.b, by=list(lo$Den), mean)
aggregate(lo$mass.b, by=list(lo$Den), stderr)
tot<- lm(log(mass.a)~ Den + Gen, data=fin)
summary(tot)
#generate LS means for hi genetic diversity
ha.lm<- lm(log(mass.a) ~ factor(Den), data=hi)
summary(ha.lm)
lsmeans(ha.lm, specs="Den", type="response")
#below
ha.lmb<- lm(log(mass.b) ~ factor(Den), data=hi)
summary(ha.lmb)
lsmeans(ha.lm, specs="Den", type="response")
#produce ls means on response scale
emmeans(ha.lm, "Den", type='response')
pairs(emmeans(ha.lm, "Den", type='response'))
test(emmeans(ha.lm, "Den", type='response'))
emmeans(ha.lmb, "Den", type='response')
pairs(emmeans(ha.lmb, "Den", type='response'))
test(emmeans(ha.lmb, "Den", type='response'))
lo.lm<- lm(log(mass.b) ~ factor(Den), data=lo)
summary(lo.lm)
#produce ls means on response scale
emmeans(lo.lm, "Den", type="response")
#contrasts
pairs(emmeans(lo.lm, "Den", type="response"))
test(emmeans(lo.lm, "Den", type="response"))
lo.lmb<- lm(log(mass.b) ~ factor(Den), data=hi)
summary(lo.lmb)
#produce ls means on response scale
emmeans(lo.lmb, "Den", type="response")
#contrasts
pairs(emmeans(lo.lmb, "Den", type="response"))
test(emmeans(lo.lmb, "Den", type="response"))
f.lm<- lm(log(mass.a) ~ (Den) , data=fin)
f.lm2<- lm(log(mass.a) ~ (Den + Gen) , data=fin)
f.lm3<- lm(log(mass.a) ~ (Den + Gen + Den*Gen) , data=fin)
anova(f.lm, f.lm2, f.lm3)
summary(f.lm)
summary(f.lm2)
summary(f.lm3)
vec<- c("Gen")
emmeans(f.lm2, "Den", type='response', by=vec)
pairs(emmeans(f.lm2, "Den", type='response', by=vec))
test(emmeans(f.lm2, "Den", type='response', by=vec))
b.lm<- lm(log(mass.b) ~ (Den) , data=fin)
b.lm2<- lm(log(mass.b) ~ (Den + Gen) , data=fin)
b.lm3<- lm(log(mass.b) ~ (Den + Gen + Den*Gen) , data=fin)
anova(b.lm, b.lm2, b.lm3)
summary(b.lm)
summary(b.lm2)
summary(b.lm3)
emmeans(b.lm2, "Den", type='response', by=vec)
pairs(emmeans(b.lm2, "Den", type='response', by=vec))
test(emmeans(b.lm2, "Den", type='response', by=vec))
#Load data
fin<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/density-Ne/data/aster.dat.csv")
#change class of factor variables
fin$Den<- as.factor(fin$Den)
fin$Gen<- as.factor(fin$Gen)
fin$plotID<- as.factor(fin$plotID)
fin$plantID<- as.factor(fin$plantID)
fin$familyID<- as.factor(fin$familyID)
lm1<- lm(log(aborted +1) ~ Den , data=fin)
lm2<- lm(log(aborted +1) ~ Den + Gen, data=fin)
lm3<- lm(log(aborted +1) ~ Gen + Den + Den*Gen, data=fin)#interaction not significant
anova(lm1, lm2, lm3)
summary(lm1)
summary(lm2)
summary(lm3)
emmeans(lm3, "Den", "Gen", type="response")
#plot(emmeans(lm3, "Den", "Gen", type="response"))
pairs(emmeans(lm3, "Den","Gen", type="response"))
test(emmeans(lm3, "Den","Gen", type="response"))
setwd("C:/Users/Mason Kulbaba/Dropbox/git/density-Ne")
rmarkdown::render(input = "markdown1.Rmd",
output_format = "pdf_document",
output_file = "Test.pdf")
rmarkdown::render(input = "markdown1.Rmd",
output_format = "html_document",
output_file = "Test.pdf")
devtools::install_version("rmarkdown", version = "1.8", repos = "http://cran.us.r-project.org")
setwd("C:/Users/Mason Kulbaba/Dropbox/git/density-Ne")
library(rmarkdown)
rmarkdown::render(input = "markdown1.Rmd",
output_format = "html_document",
output_file = "Test.pdf")
install.packages(c('rmarkdown', 'tinytex'))
install.packages(c("rmarkdown", "tinytex"))
setwd("C:/Users/Mason Kulbaba/Dropbox/git/density-Ne")
rmarkdown::render(input = "markdown1.Rmd",
output_format = "html_document",
output_file = "Test.pdf")
library(rmarkdown)
rmarkdown::render(input = "markdown1.Rmd",
output_format = "html_document",
output_file = "Test.pdf")
